name: CI

on:
  push:
    branches: [ main, dev/colab-workflow ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps (light)
        run: |
          python -m pip install --upgrade pip
          # Prefer a lightweight dev requirements file for tests when available
          if [ -f requirements-dev.txt ]; then python -m pip install -r requirements-dev.txt; else python -m pip install -r requirements.txt; fi
          # Ensure pytest is present for the test step (installed via requirements-dev.txt or explicitly)
          python -m pip install pytest
      - name: CI debug info
        run: |
          echo "--- python & pip versions ---"
          python --version || true
          pip --version || true
          echo "--- pip list (top 50) ---"
          pip list --format=columns | sed -n '1,50p' || true
          echo "--- workspace top-level files ---"
          ls -la || true
          echo "--- find (depth 2) ---"
          find . -maxdepth 2 -type f | sed -n '1,200p' || true
      - name: Run notebook fixer
        run: |
          python scripts/fix_notebook_widgets.py site/en
      - name: Verify pytest available
        run: |
          echo "--- pytest info ---"
          python -m pytest --version || python -c "import pytest; print('pytest', pytest.__version__)" || true
      - name: Run tests
        run: |
          python -m pytest -q -r a

  smoke-generator:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-smoke-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy
      - name: Run smoke generator
        run: |
          python scripts/generate_synthetic_smoke.py

  dry-run-trainer:
    runs-on: ubuntu-latest
    needs: smoke-generator
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-trainer-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy
      - name: Generate smoke CSV (again, ensures file present)
        run: |
          python scripts/generate_synthetic_smoke.py
      - name: Dry-run trainer (constructs trainer, skips heavy training)
        run: |
          python scripts/finetune_gemma_from_csv.py --csv synthetic_wifi_5ghz_outdoor_smoke.csv --dry-run --max-rows 10

  dry-run-lora:
    runs-on: ubuntu-latest
    needs: smoke-generator
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lora-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy
      - name: Ensure smoke CSV present
        run: |
          python scripts/generate_synthetic_smoke.py
      - name: Dry-run trainer (lora mode)
        run: |
          python scripts/finetune_gemma_from_csv.py --csv synthetic_wifi_5ghz_outdoor_smoke.csv --mode lora --dry-run --max-rows 10
      - name: Run reporting on evaluation output (if present)
        run: |
          python - <<'PY'
          import os
          from scripts import reporting
          p = 'eval_lora.json'
          if os.path.exists(p):
              reporting.try_plot_confusion_from_file(p, out_prefix='reports/lora')
          else:
              print('No eval_lora.json present; skipping reporting')
          PY
      - name: Upload reports and eval JSON
        uses: actions/upload-artifact@v4
        with:
          name: lora-reports
          path: |
            reports/**
            eval_lora.json

  dry-run-lora-matrix:
    runs-on: ubuntu-latest
    needs: smoke-generator
    strategy:
      matrix:
        max_rows: [5, 10]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-dryrunlora-${{ hashFiles('**/requirements.txt') }}-${{ matrix.max_rows }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy
      - name: Ensure smoke CSV present
        run: |
          python scripts/generate_synthetic_smoke.py
      - name: Dry-run trainer (lora mode - matrix)
        run: |
          python scripts/finetune_gemma_from_csv.py --csv synthetic_wifi_5ghz_outdoor_smoke.csv --mode lora --dry-run --max-rows ${{ matrix.max_rows }}
      - name: Run reporting on evaluation output (if present)
        run: |
          python - <<'PY'
          import os
          from scripts import reporting
          p = 'eval_lora.json'
          if os.path.exists(p):
              reporting.try_plot_confusion_from_file(p, out_prefix=f'reports/lora_matrix_{os.environ.get("RUNNER_TEMP","tmp") }')
          else:
              print('No eval_lora.json present; skipping reporting')
          PY
      - name: Upload reports and eval JSON (matrix)
        uses: actions/upload-artifact@v4
        with:
          name: lora-reports-matrix-${{ matrix.max_rows }}
          path: |
            reports/**
            eval_lora.json
      - name: Evaluate synthetic predictions
        run: |
          python scripts/evaluate_model.py --preds tests/fixtures/preds_synthetic.csv --target-field expected_throughput_mbps --pred-field pred --json-output eval_lora.json
